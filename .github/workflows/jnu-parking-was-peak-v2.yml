name: WAS 인프라 - 피크 타임 Scale-Up V2 (new)
on:
    workflow_dispatch:

env:
  TF_CLOUD_ORGANIZATION: sckwon770
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_WORKSPACE: jnu-parking
  PEAK_CONFIG_DIRECTORY: "./jnu-parking-prod-was/peak/"
  MAINTENANCE_CONFIG_DIRECTORY: "./jnu-parking-prod-was/maintenance/"
  IMAGE_NAME: jnuparking/jnu-parking-prod

jobs:
    prepare-variables:
        name: 워크플로우 변수 준비하기
        runs-on: ubuntu-latest
        outputs:
            image-name: ${{ steps.setup-env.outputs.image-name }}
        steps:
        - name: Github에서 레포 받아오기
          uses: actions/checkout@v3
        - name: 변수 출력하기
          id: setup-env
          run: |
            echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT

    modify-infra-with-terraform:
        needs: [ prepare-variables ]
        name: 인프라 스케일 업
        runs-on: ubuntu-latest
        permissions:
          contents: read
          pull-requests: write
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: 피크 모드 설정
              uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.0
              id: set-peak
              with:
                workspace: ${{ env.TF_WORKSPACE }}
                directory: ${{ env.PEAK_CONFIG_DIRECTORY }}

            - name: 레디스 단독 scale-up Plan 생성
              uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.0
              id: redis-scale-up-plan
              with:
                workspace: ${{ env.TF_WORKSPACE }}
                configuration_version: ${{ steps.set-peak.outputs.configuration_version_id }}
                target: "aws_elasticache_replication_group.jnu-parking-redis-prod"

              
            - name: 레디스 단독 scale-up Plan 실행
              uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.3.0
              if: fromJSON(steps.redis-scale-up-plan.outputs.payload).data.attributes.actions.IsConfirmable
              id: redis-scale-up-apply
              with:
                run: ${{ steps.redis-scale-up-plan.outputs.run_id }}
                comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"

            - name: 메인터넌스 모드 설정
              uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.0
              id: set-maintenance
              with:
                workspace: ${{ env.TF_WORKSPACE }}
                directory: ${{ env.MAINTENANCE_CONFIG_DIRECTORY }}

            - name: 공지 페이지 라우팅 변경 Plan 생성
              uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.0
              id: maintenance-routing-plan
              with:
                workspace: ${{ env.TF_WORKSPACE }}
                configuration_version: ${{ steps.set-maintenance.outputs.configuration_version_id }}
                target: "aws_cloudfront_distribution.jnu-parking-apply-distribution,aws_cloudfront_distribution.jnu-parking-manager-distribution"
              
            - name: 공지 페이지 라우팅 변경 Plan 실행
              uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.3.0
              if: fromJSON(steps.maintenance-routing-plan.outputs.payload).data.attributes.actions.IsConfirmable
              id: maintenance-routing-apply
              with:
                run: ${{ steps.maintenance-routing-plan.outputs.run_id }}
                comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"

    #         - name: 배포 완료 슬랙 알림 보내기
    #           uses: 8398a7/action-slack@v3
    #           with:
    #             status: custom
    #             fields: author, workflowRun, pullRequest
    #             custom_payload: |
    #                 {
    #                     attachments: [{
    #                         color: '#2E289E',
    #                         title: '🔥 인프라 조정 알림',
    #                         text: `주차권 시스템 Scale-up 성공! (EC2, RDS, ElastiCache)`,
    #                         fields: [
    #                             {
    #                                 title: '배포자',
    #                                 value: `${process.env.AS_AUTHOR}`,
    #                                 short: true,
    #                             },
    #                             {
    #                                 title: '워크플로 링크',
    #                                 value: `${process.env.AS_WORKFLOW_RUN}`,
    #                                 short: true,
    #                             },
    #                         ]
    #                     }]
    #                 }
    #           env:
    #             SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
                
    # run-spring-boot:
    #     needs: [ prepare-variables, modify-infra-with-terraform ]
    #     runs-on: [ ubuntu-latest ]
    #     name: 스프링 부트 기동
    #     permissions:
    #         id-token: write
    #         contents: read
    #     steps:
    #         - name: GitHub 에서 레포 받아오기
    #           uses: actions/checkout@v3

    #         - name: 배포 스크립트 실행
    #           uses: appleboy/ssh-action@master
    #           with:
    #             host: ${{ secrets.PROD_SSH_HOST }}
    #             username: ${{ secrets.PROD_SSH_USERNAME }}
    #             key: ${{ secrets.PROD_SSH_KEY }}
    #             port: ${{ secrets.PROD_SSH_PORT }}
    #             script: |
    #                 sudo docker rm -f $(sudo docker ps -qa)
    #                 sudo docker pull ${{ needs.prepare-variables.outputs.image-name }}:latest
    #                 sudo docker compose --env-file .env.peak up -d
    #                 sudo docker image prune -f
                    
    #         - name: 배포 완료 슬랙 알림 보내기
    #           uses: 8398a7/action-slack@v3
    #           with:
    #             status: custom
    #             fields: author, workflowRun, pullRequest
    #             custom_payload: |
    #                 {
    #                     attachments: [{
    #                         color: '#24C183',
    #                         title: '✅ Spring boot 기동 알림',
    #                         text: 'Spring boot 기동 성공!',
    #                         fields: [
    #                             {
    #                                 title: '배포자',
    #                                 value: `${process.env.AS_AUTHOR}`,
    #                                 short: true,
    #                             },
    #                             {
    #                                 title: '워크플로 링크',
    #                                 value: `${process.env.AS_WORKFLOW_RUN}`,
    #                                 short: true,
    #                             },
    #                         ]
    #                     }]
    #                 }
    #           env:
    #             SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}